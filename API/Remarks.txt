==========================================================================================
Köbi:
I - ACK Table:
Each entry is a number representing the packet number that is expected next, not a simple boolean value. The entry 10 in the cell (x,y) means that y received packets 0-9 from sender x. I assume we want to enumerate all packets anyway to handle reordering of packets.

II - Better way for table updates
What is the problem? Iterating through the LC-table and the ACK-table to choose the max for each entry is a small task, even a mobile CPU does that in few micro seconds, I'd expect. Building up the connection and sending the data is much more expensive, so I wouldn't be concerned about that, or what do you have in mind? Do you want to add a hash to find out quickly whether something has changed? That is possible, but is it necessary? Or do you think about a completely other problem?
Another remark to that suggestion: We should definitely keep the older timestamps, not the earlier. 

III - What happens if all nodes got the message
We could now delete all the messages from our local buffer which have reached all known nodes. We could also be lazy and only do that once the buffer is full, I don't think it makes a huge difference.
What is missing for the receive_message is that we have to store the message in the local storage. Maybe we even have to run our replacement policy.

Further remarks:
The whole idea of adding and removing nodes from the net is missing in the description.

Adding a new node: Copy the ACK-Table entries of the first node found in the network and expand botht tables with a new entry. 

Removing nodes: The API user should have a way to set a timeout for single nodes. When a node has an entry in LC-table which is older than the timeout allow, the node is deleted from both table. That is useful because it makes all messages sent smaller, and it also makes more room in the local storages. But how long such a timeout should be is highly dependant on the application, therefore it should really be set by the client of the API.

==========================================================================================
Manuel:
I answer:	Okay. I understood it wrong. makes more sense that way. But we need to talk about that again, for example if we have message 10 and message 12, we will have a 10 in the ACK table. So we can't share message 12 with the other nodes, can we?

II answer:	You're right. We definitely should prioritize the tests for the length to build up a connection and sending messages as soon as we start, to reason about the performance.

III answer:	Forgot about the local buffer. It makes more sense to delete it, since it's a very small task and we don't have to care about it later with the replacement.



On the System Overview:

I dont understand the chain you explained while explaining the network of nodes. Is it maybe a bit too much with all these i's and j's? 

==========================================================================================
Claude: 
-Is our system really symmetric? What's even the definition for a symmetric system? 
-I don't think that the definition for our network works. (for example if A knows B, B cannot know A) 


===========================================================================================
Köbi:

Yes I believe our system is symmetric, but I'm not sure if this is a well defined expression for distributed systems. But I guess we should discuss, if we want to make it fully symmetric or not, I was thinking about a symmetric system where all nodes have the same role, but maybe that's not the best solution, I'm interersted to hear :)

About the chain: 
What it is supposed to mean: Imagine we draw all the nodes on a paper, and then we draw a line between two nodes for each established connection between two nodes. Note that the connection is not directed, an established connection is always in both directions. Now we start at our node and see which nodes we can reach thorugh these lines. The union of those will form our network. Almost. We can have paths which are not possible becuase of the time when it happened. So we should only allow to take an edge, when all previous edges on the path have a timestamp earlier than the new edge. 
This is a formal way to describe, whose nodes "information" is actually able to reach us, in other words, whose nodes have touched a LC-table that we could read. While writing it, it didn't seem to be complicated, but maybe I got it wrong. Now I'm too tired to check again, but I will in morning.

@Claude, why is it that (if A knows B, B cannot know A), I can't see it. If that is the case, then my definition is definitely wrong. 
